/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.heigit.org/artifactory/main')
    }

    maven {
        url = uri('https://repo.osgeo.org/repository/release/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}




dependencies {
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'javax.xml.bind:jaxb-api:2.3.1'
    api 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    api 'com.vividsolutions:jts:1.13'
    api 'org.geotools:gt-main:19.1'
    api 'org.geotools:gt-api:19.1'
    api 'org.geotools:gt-epsg-hsql:19.1'
    api 'org.geotools:gt-geojson:19.1'
    api 'org.geotools:gt-swing:19.1'
    api 'org.geotools:gt-shapefile:19.1'
    api 'org.apache.logging.log4j:log4j:2.17.2'
    api 'org.apache.logging.log4j:log4j-1.2-api:2.17.2'
    api 'org.apache.logging.log4j:log4j-api:2.17.2'
    api 'org.apache.logging.log4j:log4j-core:2.17.2'
    api 'me.tongfei:progressbar:0.5.5'
    api 'com.github.GIScience.graphhopper:graphhopper-core:v0.13.23'
    api 'com.github.GIScience.graphhopper:graphhopper-reader-osm:v0.13.23'
    api 'com.github.GIScience.graphhopper:graphhopper-api:v0.13.23'
    api 'com.typesafe:config:1.4.1'
    api 'com.zaxxer:HikariCP:3.4.5'
    api 'org.postgresql:postgresql:42.4.3'
    api 'junit:junit:4.13.2'
    api 'org.apache.kafka:kafka_2.13:2.5.1'
    api 'org.apache.kafka:kafka-streams:2.5.1'
    api 'org.apache.kafka:kafka-clients:2.5.1'
    api 'org.apache.curator:curator-test:4.1.0'
    api "org.springframework.boot:spring-boot-starter-web:2.5.14"
    api "org.springframework.boot:spring-boot-starter-tomcat:2.5.14"
    api "org.springframework.boot:spring-boot-starter-actuator:2.5.14"
    api("org.springframework.boot:spring-boot-starter-log4j2:2.5.14")
    api("org.springframework.boot:spring-boot-gradle-plugin:2.5.14")
    api 'org.springframework.boot:spring-boot-maven-plugin:2.5.14'
    api 'io.micrometer:micrometer-registry-prometheus:1.5.6'
    api 'io.springfox:springfox-swagger2:3.0.0'
    api 'com.bedatadriven:jackson-datatype-jts:2.4'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.5'
    api 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    api 'com.fasterxml.jackson.core:jackson-annotations:2.13.3'
    api 'javax.servlet:javax.servlet-api:4.0.1'
    api 'org.skyscreamer:jsonassert:1.5.0'
    api 'org.apache.commons:commons-compress:1.22'
    api 'us.dustinj.timezonemap:timezonemap:4.5'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'
    testImplementation 'org.slf4j:slf4j-log4j12:2.0.6'
}

group = 'org.heigit.ors'
version = '6.8.0'
description = 'openrouteservice'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

sourceSets {
    test {
        java {
            srcDirs= ["src/test/java"]
        }
        resources {
            srcDirs= ["src/main/resources/"]
        }
    }
    main {
        java {
            srcDirs= ["src/main/java"]
        }
        resources {
            srcDirs= ["src/main/resources/"]
        }
    }
}



task copyTestResources(type: Copy) {
    from layout.projectDirectory.file("../openrouteservice-api-tests/conf/ors-config-test.json")
    into layout.buildDirectory.file("resources/test/")
}
processTestResources.dependsOn copyTestResources


tasks.withType(Test).configureEach {
    systemProperty('ors_config', "${buildDir}/resources/test/ors-config-test.json")
    //environment('ors_config',"${buildDir}/resources/ors-config-test.json")
}

task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            println "-->Project directory: ${projectDir}"
            println "-->Build directory: ${buildDir}"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Resource directories: "+srcSet.resources.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            println ""
        }
    }
}


// This avoids logf4j path duplications and errors.
configurations.all {
    exclude module: 'slf4j-log4j12'
    exclude module: "logback-classic"
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    exclude group: 'us.dustinj.timezonemap', module: 'timezonemap'
}
