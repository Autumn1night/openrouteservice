// Project and plugin section
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'war'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version '2.3.5.RELEASE'
}

group = 'org.heigit.ors'
version = '6.8.0'
description = 'openrouteservice'
java.sourceCompatibility = JavaVersion.VERSION_11

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

war {
    // Use bootWar from springboot
    enabled=false
}

jar {
    enabled=false
}

springBoot {
    mainClassName = 'org.heigit.ors.Application'
}

bootWar {
    mainClassName = 'org.heigit.ors.Application'
    enabled=true
}

// Repository and dependencies section
repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.heigit.org/artifactory/main')
    }

    maven {
        url = uri('https://repo.osgeo.org/repository/release/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

ext {
    log4jVersion = '2.19.0'
    slf4jVersion = '2.0.6'
    springBootVersion = '2.3.5.RELEASE'
    JacksonVersion = '2.13.3'
    geotoolsVersion = '19.1'
    graphhopperVersion = 'v0.13.23'
    kafkaVersion = '2.5.1'
}

dependencies {
    api "org.apache.kafka:kafka_2.13:${kafkaVersion}"
    api "org.apache.kafka:kafka-streams:${kafkaVersion}"
    api "org.apache.kafka:kafka-clients:${kafkaVersion}"
    api "com.github.GIScience.graphhopper:graphhopper-core:${graphhopperVersion}"
    api "com.github.GIScience.graphhopper:graphhopper-reader-osm:${graphhopperVersion}"
    api "com.github.GIScience.graphhopper:graphhopper-api:${graphhopperVersion}"
    api "org.geotools:gt-main:${geotoolsVersion}"
    api "org.geotools:gt-api:${geotoolsVersion}"
    api "org.geotools:gt-epsg-hsql:${geotoolsVersion}"
    api "org.geotools:gt-geojson:${geotoolsVersion}"
    api "org.geotools:gt-swing:${geotoolsVersion}"
    api "org.geotools:gt-shapefile:${geotoolsVersion}"
    api "org.slf4j:slf4j-api:${slf4jVersion}"
    api "org.apache.logging.log4j:log4j:${log4jVersion}"
    api "org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}"
    api "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    api "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    api "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    api "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
    api "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    api "org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}"
    api "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    api "com.fasterxml.jackson.core:jackson-core:${JacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-annotations:${JacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${JacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.3"
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'javax.xml.bind:jaxb-api:2.3.1'
    api 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    api 'com.vividsolutions:jts:1.13'
    api 'me.tongfei:progressbar:0.5.5'
    api 'com.typesafe:config:1.4.1'
    api 'com.zaxxer:HikariCP:3.4.5'
    api 'org.postgresql:postgresql:42.4.3'
    api 'junit:junit:4.13.1'
    api 'org.apache.curator:curator-test:4.1.0'
    api 'io.micrometer:micrometer-registry-prometheus:1.5.6'
    api 'io.springfox:springfox-swagger2:3.0.0'
    api 'com.bedatadriven:jackson-datatype-jts:2.4'
    api 'javax.servlet:javax.servlet-api:4.0.1'

    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

// Target section

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit()
        }
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

// Jacoco section
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
    //reportsDirectory = layout.buildDirectory.dir('site/jacoco')
}

jacocoTestReport {
    reports {
        xml.required
        html.required
        //to create coverage report in html
        html.destination file("${buildDir}/site/jacoco/javoco.html")
        //for XML
        xml.destination file("${buildDir}/site/jacoco/jacoco.xml")
    }
}

// Define source sets manually

sourceSets {
    test {
        // Set the java wide resource folders for gradle and jvm
        output.resourcesDir = file("${buildDir}/resources/test")
        java.destinationDirectory.set(file("${buildDir}/resources/test"))
        java {
            srcDirs = ["${projectDir}/src/test/java"]
        }
        resources {
            srcDirs = ["${projectDir}/src/main/resources/"]
        }
    }
    main {
        // Set the java wide resource folders for gradle and jvm
        output.resourcesDir = file("${buildDir}/resources/main")
        java.destinationDirectory.set(file("${buildDir}/resources/main"))
        java {
            srcDirs = ["${projectDir}/src/main/java"]
        }
        resources {
            srcDirs = ["${projectDir}/src/main/resources/"]
        }
    }
}

// Task section

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task copyTestResources(type: Copy) {
    from layout.projectDirectory.file("../openrouteservice-api-tests/conf/ors-config-test.json")
    into layout.buildDirectory.file("resources/test/")
}
processTestResources.dependsOn copyTestResources

task copyResources(type: Copy) {
    from layout.projectDirectory.dir("src/main/resources")
    into layout.buildDirectory.dir("classes")
}
processResources.dependsOn copyResources


tasks.withType(Test).configureEach {
    systemProperty('ors_config', "${buildDir}/resources/test/ors-config-test.json")
}

task printSourceSetInformation() {
    doLast {
        sourceSets.each { srcSet ->
            println "[" + srcSet.name + "]"
            println "-->Project directory: ${projectDir}"
            println "-->Build directory: ${buildDir}"
            print "-->Source directories: " + srcSet.allJava.srcDirs + "\n"
            print "-->Resource directories: " + srcSet.resources.srcDirs + "\n"
            print "-->Output directories: " + srcSet.output.classesDirs.files + "\n"
            print "-->Output directories: " + srcSet+ "\n"
            println ""
        }
    }
}

// This avoids logf4j path duplications and errors.
configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude module: "logback-classic"
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.slf4j') {
            details.useVersion "${slf4jVersion}"
        }
    }
}
